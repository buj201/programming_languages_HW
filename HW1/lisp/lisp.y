%{
#include <iostream>
int yylex(); // A function that is to be generated and provided by flex,
             // which returns a next token when called repeatedly.
int yyerror(const char *p) { std::cerr << "error: " << p << std::endl; };
%}

%union {
    int val;
};

%start prog

%token <val> NUM
%token LPAREN RPAREN
%token PLUS MINUS MUL DIV

%type <val> plusval mulval closed

%%

prog: closed   {std::cout << $1 << std::endl; }
    ;

plusval: LPAREN PLUS closed closed      {$$ = $3 + $4; }
       | plusval closed               {$$ = $1 + $2; }
       ;

mulval: LPAREN MUL closed closed      {$$ = $3 * $4; }
      | mulval closed               {$$ = $1 * $2; }
      ;

closed: LPAREN MINUS closed closed RPAREN     {$$ = $3 - $4; }
    | LPAREN DIV closed closed RPAREN     {$$ = $3 / $4; }
    | plusval RPAREN                {$$ = $1; }
    | mulval RPAREN                 {$$ = $1; }
    | NUM                           {$$ = $1; }
    ;
%%

int main()
{
    yyparse(); // A parsing function that will be generated by Bison.
    return 0;
}
